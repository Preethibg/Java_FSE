Scenario 1:Scenario 1: The bank needs to process monthly interest for all savings accounts.
Question: Write a stored procedure ProcessMonthlyInterest that calculates and updates the balance of all savings accounts by applying an interest rate of 1% to the current balance.



-- Scenario 1: Process Monthly Interest

-- 1. Create the SavingsAccounts Table
CREATE TABLE SavingsAccounts (
    AccountID INT PRIMARY KEY,
    Balance DECIMAL(18, 2) NOT NULL
);

-- 2. Insert Sample Data
INSERT INTO SavingsAccounts (AccountID, Balance) VALUES
(1001, 1000.00),
(1002, 2500.50),
(1003, 500.25);

-- Optional: View initial balances
-- Use a simple SELECT for messages, as PRINT might not work or show correctly.
SELECT '--- Balances before interest ---' AS Message;
SELECT AccountID, Balance FROM SavingsAccounts;

-- 3. Create the ProcessMonthlyInterest Stored Procedure
-- Use DELIMITER to change the statement terminator from ; to // for the procedure definition
DELIMITER //

CREATE PROCEDURE ProcessMonthlyInterest()
BEGIN
    -- Update the balance for all savings accounts
    -- Directly applying 1% interest (multiply by 1.01)
    UPDATE SavingsAccounts
    SET Balance = Balance * 1.01;
END //

-- Reset DELIMITER back to ;
DELIMITER ;

-- 4. Execute the Stored Procedure
CALL ProcessMonthlyInterest(); -- MySQL uses CALL for stored procedures

-- 5. View balances after interest
SELECT '--- Balances after interest ---' AS Message;
SELECT AccountID, Balance FROM SavingsAccounts;


-- DROP PROCEDURE IF EXISTS ProcessMonthlyInterest;
-- DROP TABLE IF EXISTS SavingsAccounts;



Output:

Message
--- Balances before interest ---

AccountID	Balance
1001	        1000.00
1002	        2500.50
1003	        500.25

Message
--- Balances after interest ---

AccountID	Balance
1001	        1010.00
1002	        2525.51
1003	        505.25



Scenario 2: The bank wants to implement a bonus scheme for employees based on their performance.
Question: Write a stored procedure UpdateEmployeeBonus that updates the salary of employees in a given department by adding a bonus percentage passed as a parameter.

-- Scenario 2: Update Employee Bonus 


-- 1. Create Employees and Departments Tables
CREATE TABLE Departments (
    DepartmentID INT PRIMARY KEY,
    DepartmentName VARCHAR(50) NOT NULL
);

CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    Salary DECIMAL(18, 2) NOT NULL,
    DepartmentID INT,
    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)
);

-- 2. Insert Sample Data
INSERT INTO Departments (DepartmentID, DepartmentName) VALUES
(1, 'Sales'),
(2, 'Marketing'),
(3, 'HR');

INSERT INTO Employees (EmployeeID, FirstName, LastName, Salary, DepartmentID) VALUES
(101, 'Alice', 'Smith', 60000.00, 1),
(102, 'Bob', 'Johnson', 75000.00, 1),
(103, 'Charlie', 'Brown', 55000.00, 2),
(104, 'Diana', 'Prince', 80000.00, 3),
(105, 'Eve', 'Adams', 62000.00, 2);

-- Optional: View initial data
SELECT '--- Salaries before bonus for Department 1 ---' AS Message;
SELECT EmployeeID, FirstName, Salary FROM Employees WHERE DepartmentID = 1;
SELECT '--- Salaries before bonus for Department 2 ---' AS Message;
SELECT EmployeeID, FirstName, Salary FROM Employees WHERE DepartmentID = 2;


-- 3. Create the UpdateEmployeeBonus Stored Procedure
DELIMITER //

CREATE PROCEDURE UpdateEmployeeBonus(
    IN p_DepartmentID INT,
    IN p_BonusPercentage DECIMAL(5, 2)
)
BEGIN
    -- Validate the bonus percentage
    IF p_BonusPercentage >= 0 THEN
        -- Update the salary for employees in the specified department
        UPDATE Employees
        SET Salary = Salary * (1 + (p_BonusPercentage / 100))
        WHERE DepartmentID = p_DepartmentID;
    END IF;
END //

DELIMITER ;

-- 4. Execute the Stored Procedure
CALL UpdateEmployeeBonus(1, 5.00); -- Adds 5% bonus to employees in Department 1

SELECT '--- Salaries after 5% bonus for Department 1 ---' AS Message;
SELECT EmployeeID, FirstName, Salary FROM Employees WHERE DepartmentID = 1;

CALL UpdateEmployeeBonus(2, 10.00); -- Adds 10% bonus to employees in Department 2

SELECT '--- Salaries after 10% bonus for Department 2 ---' AS Message;
SELECT EmployeeID, FirstName, Salary FROM Employees WHERE DepartmentID = 2;

-- Test with a department with no employees (this will simply update 0 rows)
CALL UpdateEmployeeBonus(99, 5.00);

-- Optional: Clean up
-- DROP PROCEDURE IF EXISTS UpdateEmployeeBonus;
-- DROP TABLE IF EXISTS Employees;
-- DROP TABLE IF EXISTS Departments;


Output:

Message
--- Salaries before bonus for Department 1 ---

EmployeeID	FirstName	Salary
101		Alice	        60000.00
102		Bob		75000.00

Message
--- Salaries before bonus for Department 2 ---

EmployeeID	FirstName	Salary
103		Charlie		55000.00
105		Eve		62000.00

Message
--- Salaries after 5% bonus for Department 1 ---

EmployeeID	FirstName	Salary
101		Alice		63000.00
102		Bob		78750.00

Message
--- Salaries after 10% bonus for Department 2 ---

EmployeeID	FirstName	Salary
103		Charlie		60500.00
105		Eve		68200.00




Scenario 3: Customers should be able to transfer funds between their accounts.
Question: Write a stored procedure TransferFunds that transfers a specified amount from one account to another, checking that the source account has sufficient balance before making the transfer.


-- Scenario 3: Transfer Funds 
-- 1. Create the Accounts Table
CREATE TABLE Accounts (
    AccountID INT PRIMARY KEY,
    Balance DECIMAL(18, 2) NOT NULL
);

-- 2. Insert Sample Data
INSERT INTO Accounts (AccountID, Balance) VALUES
(2001, 1000.00), -- Alice's account
(2002, 500.00),  -- Bob's account
(2003, 200.00);  -- Charlie's account

-- Optional: View initial balances
SELECT '--- Initial Balances ---' AS Message;
SELECT * FROM Accounts;
SELECT '------------------------' AS Message;

-- 3. Create the TransferFunds Stored Procedure
DELIMITER //

CREATE PROCEDURE TransferFunds(
    IN p_SourceAccountID INT,
    IN p_DestinationAccountID INT,
    IN p_Amount DECIMAL(18, 2)
)
BEGIN
    DECLARE v_SourceBalance DECIMAL(18, 2);
    -- DECLARE v_DestinationBalance DECIMAL(18, 2); -- Not strictly needed for logic, only for message

    -- Start a transaction for atomicity
    START TRANSACTION;

    -- Check for valid amount
    IF p_Amount <= 0 THEN
        ROLLBACK; -- Rollback invalid operation
        SELECT 'Error: Transfer amount must be positive.' AS ErrorMessage;
        LEAVE LEAVE_PROCEDURE; -- Exit the procedure
    END IF;

    -- Prevent transfer to and from the same account
    IF p_SourceAccountID = p_DestinationAccountID THEN
        ROLLBACK;
        SELECT 'Error: Cannot transfer funds to the same account.' AS ErrorMessage;
        LEAVE LEAVE_PROCEDURE;
    END IF;

    -- Get current balance of source account. Use FOR UPDATE for pessimistic locking.
    -- This locks the row until the transaction is committed or rolled back.
    SELECT Balance INTO v_SourceBalance
    FROM Accounts
    WHERE AccountID = p_SourceAccountID
    FOR UPDATE;

    -- Check if source account exists
    IF v_SourceBalance IS NULL THEN
        ROLLBACK;
        SELECT 'Error: Source account not found.' AS ErrorMessage;
        LEAVE LEAVE_PROCEDURE;
    END IF;

    -- Check if destination account exists (no lock needed as we're not immediately modifying it)
    -- We'll just check if an update will affect a row.
    IF NOT EXISTS (SELECT 1 FROM Accounts WHERE AccountID = p_DestinationAccountID) THEN
        ROLLBACK;
        SELECT 'Error: Destination account not found.' AS ErrorMessage;
        LEAVE LEAVE_PROCEDURE;
    END IF;

    -- Check for sufficient balance
    IF v_SourceBalance < p_Amount THEN
        ROLLBACK;
        SELECT 'Error: Insufficient balance in the source account.' AS ErrorMessage;
        LEAVE LEAVE_PROCEDURE;
    END IF;

    -- Debit the source account
    UPDATE Accounts
    SET Balance = Balance - p_Amount
    WHERE AccountID = p_SourceAccountID;

    -- Credit the destination account
    UPDATE Accounts
    SET Balance = Balance + p_Amount
    WHERE AccountID = p_DestinationAccountID;

    -- Commit the transaction if all operations are successful
    COMMIT;

    SELECT CONCAT('Success: Funds transferred (', p_Amount, ') from Acc ', p_SourceAccountID, ' to Acc ', p_DestinationAccountID, '.') AS Message;

END //

DELIMITER ;

-- 4. Execute the Stored Procedure (Test Cases)

SELECT '--- Test Case 1: Successful Transfer (2001 to 2002, Amount 100) ---' AS Message;
CALL TransferFunds(2001, 2002, 100.00);
SELECT * FROM Accounts;
SELECT '------------------------' AS Message;

SELECT '--- Test Case 2: Insufficient Balance (2001 to 2003, Amount 1000) ---' AS Message;
CALL TransferFunds(2001, 2003, 1000.00);
SELECT * FROM Accounts;
SELECT '------------------------' AS Message;

SELECT '--- Test Case 3: Source Account Not Found (9999 to 2002, Amount 50) ---' AS Message;
CALL TransferFunds(9999, 2002, 50.00);
SELECT * FROM Accounts;
SELECT '------------------------' AS Message;

SELECT '--- Test Case 4: Transfer to Same Account (2001 to 2001, Amount 10) ---' AS Message;
CALL TransferFunds(2001, 2001, 10.00);
SELECT * FROM Accounts;
SELECT '------------------------' AS Message;

SELECT '--- Test Case 5: Negative Amount (2001 to 2002, Amount -50) ---' AS Message;
CALL TransferFunds(2001, 2002, -50.00);
SELECT * FROM Accounts;
SELECT '------------------------' AS Message;

-- Optional: Clean up
-- DROP PROCEDURE IF EXISTS TransferFunds;
-- DROP TABLE IF EXISTS Accounts;

Output:

Message
--- Initial Balances ---

AccountID	Balance
2001		1000.00
2002		500.00
2003		200.00

Message
------------------------






