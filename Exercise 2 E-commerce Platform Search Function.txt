// Main.java (Combined file for E-commerce Platform Search Function)

public class Main {
    public static void main(String[] args) {
        System.out.println("--- E-commerce Platform Search Function Test ---");

        // --- Setup Products ---
        // For Linear Search: Array doesn't need to be sorted initially
        Product[] unsortedProducts = {
            new Product("P103", "Laptop", "Electronics"),
            new Product("P101", "Mouse", "Electronics"),
            new Product("P105", "Keyboard", "Electronics"),
            new Product("P201", "T-Shirt", "Apparel"),
            new Product("P202", "Jeans", "Apparel")
        };

        // For Binary Search: Array MUST be sorted by productId
        // In a real scenario, you'd fetch already sorted data or sort once.
        // For this example, we'll create it pre-sorted for simplicity.
        Product[] sortedProducts = {
            new Product("P101", "Mouse", "Electronics"),    // 0
            new Product("P103", "Laptop", "Electronics"),   // 1
            new Product("P105", "Keyboard", "Electronics"), // 2
            new Product("P201", "T-Shirt", "Apparel"),      // 3
            new Product("P202", "Jeans", "Apparel")         // 4
        };

        // --- Test Linear Search ---
        System.out.println("\n--- Testing Linear Search ---");

        // Search for existing product
        String searchId1 = "P105";
        long startTime = System.nanoTime();
        Product foundProduct1 = linearSearch(unsortedProducts, searchId1);
        long endTime = System.nanoTime();
        if (foundProduct1 != null) {
            System.out.println("Linear Search: Found product: " + foundProduct1.getProductName() + " (ID: " + foundProduct1.getProductId() + ")");
        } else {
            System.out.println("Linear Search: Product with ID " + searchId1 + " not found.");
        }
        System.out.println("Time taken: " + (endTime - startTime) + " ns");

        // Search for non-existing product
        String searchId2 = "P999";
        startTime = System.nanoTime();
        Product foundProduct2 = linearSearch(unsortedProducts, searchId2);
        endTime = System.nanoTime();
        if (foundProduct2 != null) {
            System.out.println("Linear Search: Found product: " + foundProduct2.getProductName() + " (ID: " + foundProduct2.getProductId() + ")");
        } else {
            System.out.println("Linear Search: Product with ID " + searchId2 + " not found.");
        }
        System.out.println("Time taken: " + (endTime - startTime) + " ns");

        // --- Test Binary Search ---
        System.out.println("\n--- Testing Binary Search ---");

        // Search for existing product
        String searchId3 = "P201";
        startTime = System.nanoTime();
        Product foundProduct3 = binarySearch(sortedProducts, searchId3);
        endTime = System.nanoTime();
        if (foundProduct3 != null) {
            System.out.println("Binary Search: Found product: " + foundProduct3.getProductName() + " (ID: " + foundProduct3.getProductId() + ")");
        } else {
            System.out.println("Binary Search: Product with ID " + searchId3 + " not found.");
        }
        System.out.println("Time taken: " + (endTime - startTime) + " ns");


        // Search for non-existing product
        String searchId4 = "P102"; // Not in the list
        startTime = System.nanoTime();
        Product foundProduct4 = binarySearch(sortedProducts, searchId4);
        endTime = System.nanoTime();
        if (foundProduct4 != null) {
            System.out.println("Binary Search: Found product: " + foundProduct4.getProductName() + " (ID: " + foundProduct4.getProductId() + ")");
        } else {
            System.out.println("Binary Search: Product with ID " + searchId4 + " not found.");
        }
        System.out.println("Time taken: " + (endTime - startTime) + " ns");

        System.out.println("\n--- Search Function Test Complete ---");
    }

    /**
     * Implements linear search to find a product by its ID.
     * Time Complexity: O(N) in worst and average case, O(1) in best case.
     */
    public static Product linearSearch(Product[] products, String productId) {
        for (Product product : products) {
            if (product.getProductId().equals(productId)) {
                return product;
            }
        }
        return null; // Product not found
    }

    /**
     * Implements binary search to find a product by its ID.
     * Pre-condition: The 'products' array must be sorted by productId.
     * Time Complexity: O(log N) in worst and average case, O(1) in best case.
     */
    public static Product binarySearch(Product[] products, String productId) {
        int low = 0;
        int high = products.length - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2; // To prevent potential overflow

            // Compare the product ID at mid with the target productId
            int comparison = products[mid].getProductId().compareTo(productId);

            if (comparison == 0) {
                return products[mid]; // Found the product
            } else if (comparison < 0) {
                low = mid + 1; // Target is in the right half
            } else {
                high = mid - 1; // Target is in the left half
            }
        }
        return null; // Product not found
    }
}

// --- Product Class ---
class Product { // No 'public' as it's not the main public class
    private String productId;
    private String productName;
    private String category;

    public Product(String productId, String productName, String category) {
        this.productId = productId;
        this.productName = productName;
        this.category = category;
    }

    // Getters
    public String getProductId() {
        return productId;
    }

    public String getProductName() {
        return productName;
    }

    public String getCategory() {
        return category;
    }

    @Override
    public String toString() {
        return "Product{" +
               "productId='" + productId + '\'' +
               ", productName='" + productName + '\'' +
               ", category='" + category + '\'' +
               '}';
    }
}

OUTPUT:

--- E-commerce Platform Search Function Test ---

--- Testing Linear Search ---
Linear Search: Found product: Keyboard (ID: P105)
Time taken: 4640 ns
Linear Search: Product with ID P999 not found.
Time taken: 1920 ns

--- Testing Binary Search ---
Binary Search: Found product: T-Shirt (ID: P201)
Time taken: 20800 ns
Binary Search: Product with ID P102 not found.
Time taken: 3500 ns

--- Search Function Test Complete ---

=== Code Execution Successful ===
