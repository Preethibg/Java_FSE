Exercise 1: Mocking and Stubbing 
Scenario: 
You need to test a service that depends on an external API. Use Mockito to mock the 
external API and stub its methods.


// Main.java (Renamed for easier execution in basic online compilers)

import java.io.PrintWriter;

// ExternalApi.java (Interface definition)
interface ExternalApi {
    String getData();
}

// MyService.java (Service class definition)
class MyService {
    private final ExternalApi externalApi;

    public MyService(ExternalApi externalApi) {
        this.externalApi = externalApi;
    }

    public String fetchData() {
        return externalApi.getData();
    }
}

// Main class to run the simulation (formerly MyServiceTest_QuickSolution)
public class Main { // Renamed from MyServiceTest_QuickSolution to Main for simple online compilers

    public static void main(String[] args) {
        System.out.println("--- Starting Mocking Simulation ---");

        // Step 1 & 2: Simulate creating a mock object and stubbing its method.
        // We create an anonymous inner class that implements ExternalApi
        // and provides our predefined "Mock Data".
        ExternalApi mockApi = new ExternalApi() {
            @Override
            public String getData() {
                // This method is 'stubbed' to return a fixed value
                return "Mock Data";
            }
        };

        // Step 3: Create an instance of MyService, injecting our "mock" object.
        MyService service = new MyService(mockApi);

        // Call the method under "test".
        String result = service.fetchData();

        System.out.println("Service fetched data: \"" + result + "\"");

        // Step 4: Simple assertion (without JUnit's assertEquals)
        String expectedData = "Mock Data";
        if (result.equals(expectedData)) {
            System.out.println("Assertion Passed: Result matches expected data!");
        } else {
            System.out.println("Assertion FAILED: Expected \"" + expectedData + "\", but got \"" + result + "\"");
        }

        // For a simple, quick solution without a dedicated mocking framework,
        // direct verification of method calls is complex and not included here.
        // The success of the assertion (above) implicitly indicates getData() was called
        // and returned the stubbed value.

        System.out.println("--- Simulation Complete ---");
    }
}


Output:

--- Starting Mocking Simulation ---
Service fetched data: "Mock Data"
Assertion Passed: Result matches expected data!
--- Simulation Complete ---

=== Code Execution Successful ===
